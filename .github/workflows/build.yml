# code by shinsad

name: Build EXE
on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      release-created: ${{ steps.set-version.outputs.release-created }}
      uuid: ${{ steps.generate-uuid.outputs.uuid }}
      product-id: ${{ steps.get-product-id.outputs.product-id }}
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install pyinstaller
        if (Test-Path requirements.txt) {
          pip install -r requirements.txt
        } else {
          echo "No requirements.txt found, skipping..."
        }
      shell: powershell
      
    - name: Build application (folder mode)
      run: |
        # Kiem tra xem co file facebook.ico khong
        if (Test-Path "facebook.ico") {
          Write-Host "[SUCCESS] Found facebook.ico, building with icon..."
          pyinstaller --onedir --windowed --icon="facebook.ico" --name="MyApp" app.py
        } else {
          Write-Host "[WARNING] facebook.ico not found, building without icon..."
          pyinstaller --onedir --windowed --name="MyApp" app.py
        }
      shell: powershell
      
    - name: Auto-detect and copy folders to _internal
      run: |
        Write-Host "=== Auto-detecting folders to copy ==="
        
        # Danh sach cac folder se bo qua (khong copy)
        $excludeFolders = @(
          "dist", "build", "__pycache__", ".git", ".github", 
          "node_modules", ".vscode", ".idea", "venv", "env",
          ".pytest_cache", "htmlcov", ".coverage", ".mypy_cache",
          "site-packages", ".tox", ".nox"
        )
        
        # Lay tat ca folder trong root directory
        $allFolders = Get-ChildItem -Directory | Where-Object { 
          $_.Name -notin $excludeFolders 
        }
        
        Write-Host "Folders found to copy:"
        if ($allFolders.Count -eq 0) {
          Write-Host "  [WARNING] No folders to copy"
        } else {
          $allFolders | ForEach-Object { Write-Host "  [FOLDER] $($_.Name)" }
        }
        
        # Copy folders vao _internal
        foreach ($folder in $allFolders) {
          $sourcePath = $folder.FullName
          $destPath = "dist/MyApp/_internal/$($folder.Name)"
          
          Write-Host "Copying folder: $($folder.Name) -> _internal/$($folder.Name)"
          
          try {
            Copy-Item -Path $sourcePath -Destination $destPath -Recurse -Force
            Write-Host "[SUCCESS] Successfully copied folder: $($folder.Name)"
          } catch {
            Write-Host "[ERROR] Failed to copy folder $($folder.Name): $($_.Exception.Message)"
          }
        }
        
        Write-Host "=== Auto-copy folders completed ==="
      shell: powershell
      
    - name: Copy icon file to dist folder
      run: |
        if (Test-Path "facebook.ico") {
          Copy-Item "facebook.ico" "dist/MyApp/"
          Write-Host "[SUCCESS] Copied facebook.ico to dist folder"
        } else {
          Write-Host "[WARNING] facebook.ico not found, skipping copy"
        }
      shell: powershell
      
    - name: Get Product ID from config.json
      id: get-product-id
      run: |
        # Kiểm tra config.json trong _internal trước, sau đó root
        $configPaths = @(
          "dist/MyApp/_internal/config.json",
          "config.json"
        )
        
        $productId = $null
        foreach ($configPath in $configPaths) {
          if (Test-Path $configPath) {
            Write-Host "Found config.json at: $configPath"
            $config = Get-Content $configPath | ConvertFrom-Json
            $productId = $config.id
            if ($productId) {
              echo "product-id=$productId" >> $env:GITHUB_OUTPUT
            echo "[SUCCESS] Product ID: $productId"
              break
            }
          }
        }
        
        if (-not $productId) {
          echo "[ERROR] No Product ID found in any config.json"
          exit 1
        }
      shell: powershell
      
    - name: Generate UUID
      id: generate-uuid
      run: |
        $uuid = [guid]::NewGuid().ToString()
        echo "uuid=$uuid" >> $env:GITHUB_OUTPUT
        echo "[SUCCESS] Generated UUID: $uuid"
      shell: powershell
      
    - name: Create internal folder structure and files
      run: |
        # Tạo các thư mục cần thiết (nếu chưa có)
        New-Item -ItemType Directory -Force -Path "dist/MyApp/internal"
        New-Item -ItemType Directory -Force -Path "dist/MyApp/config"
        New-Item -ItemType Directory -Force -Path "dist/MyApp/data"
        
        # Copy README.md nếu có
        if (Test-Path "README.md") {
          Copy-Item "README.md" "dist/MyApp/"
        }
        
        # Copy config.json vào config folder nếu có và chưa có
        if ((Test-Path "config.json") -and -not (Test-Path "dist/MyApp/config/config.json")) {
          Copy-Item "config.json" "dist/MyApp/config/"
        }
        if (Test-Path "update_info.json") {
          Copy-Item "update_info.json" "dist/MyApp/_internal/"
          Write-Host "[SUCCESS] Copied update_info.json to _internal folder"
        } else {
          Write-Host "[WARNING] update_info.json not found in repository"
        }
        
        # Tạo version.txt
        "App Version: ${{ github.sha }}" | Out-File -FilePath "dist/MyApp/version.txt"
        
        # Tạo version_client.json với UUID (không BOM)
        $versionClientData = @{
          version_client = "${{ steps.generate-uuid.outputs.uuid }}"
          product_id = "${{ steps.get-product-id.outputs.product-id }}"
          created_at = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
          commit_sha = "${{ github.sha }}"
        } | ConvertTo-Json -Depth 2
        
        # Ghi file vào _internal (PyInstaller folder)
        $versionClientData | Out-File -FilePath "dist/MyApp/_internal/version_client.json" -Encoding UTF8 -NoNewline
        
        # Copy thêm vào root để backup
        $versionClientData | Out-File -FilePath "dist/MyApp/version_client.json" -Encoding UTF8 -NoNewline
        
        echo "[SUCCESS] Created version_client.json in _internal folder with UUID: ${{ steps.generate-uuid.outputs.uuid }}"
        
        # Kiem tra file da tao
        if (Test-Path "dist/MyApp/_internal/version_client.json") {
          echo "[SUCCESS] File exists in _internal folder"
          Get-Content "dist/MyApp/_internal/version_client.json" | Write-Host
        } else {
          echo "[ERROR] File NOT created in _internal folder"
          exit 1
        }

        # Di chuyển update_info.json ra ngoài
        if (Test-Path "dist/MyApp/_internal/update_info.json") {
          Move-Item "dist/MyApp/_internal/update_info.json" "dist/MyApp/" -Force
          Write-Host "[SUCCESS] Moved update_info.json to root folder"
        }
        
        # Di chuyển folder ldplayer ra ngoài
        if (Test-Path "dist/MyApp/_internal/ldplayer") {
          Move-Item "dist/MyApp/_internal/ldplayer" "dist/MyApp/" -Force
          Write-Host "[SUCCESS] Moved ldplayer folder to root"
        }
        
        # Di chuyển folder apk ra ngoài  
        if (Test-Path "dist/MyApp/_internal/apk") {
          Move-Item "dist/MyApp/_internal/apk" "dist/MyApp/" -Force
          Write-Host "[SUCCESS] Moved apk folder to root"
        }
        
        # Thêm vào phần kiểm tra cấu trúc
        echo "`nChecking moved files/folders:"
        $itemsToCheck = @(
          "update_info.json",
          "ldplayer",
          "apk"
        )
        
        foreach ($item in $itemsToCheck) {
          if (Test-Path "dist/MyApp/$item") {
            echo "[SUCCESS] Found $item in root folder"
          } else {
            echo "[WARNING] $item NOT found in root folder" 
          }
        }
      shell: powershell
      
    - name: Verify folder structure
      run: |
        echo "=== Verifying build structure ==="
        echo "Root MyApp folder:"
        Get-ChildItem "dist/MyApp" | Select-Object Name, Mode | Format-Table
        
        echo "`n_internal folder contents:"
        if (Test-Path "dist/MyApp/_internal") {
          Get-ChildItem "dist/MyApp/_internal" | Select-Object Name, Length | Format-Table
          
          echo "`nAll copied folders in _internal:"
          Get-ChildItem "dist/MyApp/_internal" -Directory | Where-Object { 
            $_.Name -notlike "*__pycache__*"
          } | Select-Object FullName | Format-Table -AutoSize
        } else {
          echo "[ERROR] _internal folder not found!"
        }
        
        echo "`nChecking version_client.json locations:"
        if (Test-Path "dist/MyApp/_internal/version_client.json") {
          echo "[SUCCESS] Found in _internal/"
          $content = Get-Content "dist/MyApp/_internal/version_client.json" -Raw
          echo "Content preview: $($content.Substring(0, [Math]::Min(100, $content.Length)))"
        } else {
          echo "[ERROR] NOT found in _internal/"
        }
        
        if (Test-Path "dist/MyApp/version_client.json") {
          echo "[SUCCESS] Found in root/"
        } else {
          echo "[ERROR] NOT found in root/"
        }
        
        # Kiem tra icon file
        if (Test-Path "dist/MyApp/facebook.ico") {
          echo "[SUCCESS] Icon file found in dist folder"
        } else {
          echo "[WARNING] Icon file NOT found in dist folder"
        }
      shell: powershell
      
    - name: Create ZIP package
      run: |
        cd dist
        Compress-Archive -Path MyApp -DestinationPath MyApp-windows.zip
        
        # Hiển thị nội dung để kiểm tra
        Write-Host "ZIP package contents:"
        Expand-Archive -Path MyApp-windows.zip -DestinationPath temp_check -Force
        
        Write-Host "`n=== Full structure check ==="
        Get-ChildItem -Recurse temp_check/MyApp | Select-Object FullName, Length | Format-Table
        
        Write-Host "`n=== Looking for copied folders in _internal ==="
        Get-ChildItem -Recurse temp_check/MyApp/_internal -Directory | Where-Object { 
          $_.Name -notlike "*__pycache__*" -and
          $_.Name -notlike "*dist-info*" -and
          $_.Name -notlike "*egg-info*"
        } | Select-Object FullName | Format-Table
        
        # Kiem tra icon trong ZIP
        if (Test-Path "temp_check/MyApp/facebook.ico") {
          Write-Host "[SUCCESS] Icon file included in ZIP package"
        } else {
          Write-Host "[WARNING] Icon file NOT included in ZIP package"
        }
        
        Remove-Item -Recurse -Force temp_check
        
        Write-Host "ZIP file created successfully: MyApp-windows.zip"
        Write-Host "ZIP file size: $((Get-Item MyApp-windows.zip).Length) bytes"
      shell: powershell
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MyApp-windows
        path: dist/MyApp-windows.zip
        
    - name: Set version output
      id: set-version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release-created=tag" >> $GITHUB_OUTPUT
        else
          echo "version=" >> $GITHUB_OUTPUT
          echo "release-created=main" >> $GITHUB_OUTPUT
        fi
      shell: bash
        
    - name: Create Release (if tag pushed)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/MyApp-windows.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🚀 Phiên bản mới
          
          ### Thay đổi
          - Tự động build từ commit: ${{ github.sha }}
          - Build time: ${{ github.run_number }}
          - UUID: ${{ steps.generate-uuid.outputs.uuid }}
          - ✨ Tự động copy tất cả folder vào _internal
          - 🎨 EXE file có icon Facebook
          
          ### Cài đặt
          1. Tải file ZIP
          2. Giải nén
          3. Chạy MyApp.exe (có icon Facebook)
          
          ### Cấu trúc thư mục
          ```
          MyApp/
          ├── MyApp.exe (with Facebook icon)
          ├── facebook.ico
          ├── version.txt
          ├── version_client.json (backup)
          ├── internal/
          ├── config/
          │   └── config.json
          ├── data/
          └── _internal/ (PyInstaller files + Auto-copied folders)
              ├── version_client.json ← MAIN FILE
              ├── [your_folders] ← AUTO COPIED FOLDERS ONLY
              └── ... (other PyInstaller files)
          ```
          
          ### 📁 Auto-copied content
          Tất cả folder từ source code đã được tự động copy vào `_internal/` 
          để đảm bảo ứng dụng có thể truy cập được khi chạy exe.
          
          ### 🎨 Icon Support
          EXE file đã được gắn icon Facebook (facebook.ico)
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  auto-release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.PAT_TOKEN }}
        
    - name: Get next version
      id: version
      run: |
        # Lấy tag mới nhất
        LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -n1)
        
        if [ -z "$LATEST_TAG" ]; then
          # Nếu chưa có tag nào, bắt đầu từ v1.0.0
          NEW_VERSION="v1.0.0"
        else
          echo "Latest tag: $LATEST_TAG"
          
          # Loại bỏ 'v' và tách các số
          VERSION_NUMBER=$(echo $LATEST_TAG | sed 's/^v//')
          
          # Tách major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"
          
          # Tăng patch version
          PATCH=$((PATCH + 1))
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        fi
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: MyApp-windows
        path: ./release
        
    - name: Create auto release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "Auto Release ${{ steps.version.outputs.version }}"
        files: ./release/MyApp-windows.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## 🤖 Tự động phát hành
          
          Phiên bản này được tự động tạo từ commit mới nhất trên main branch.
          
          **Commit:** ${{ github.sha }}
          **Thời gian:** ${{ github.event.head_commit.timestamp }}
          **Thông điệp:** ${{ github.event.head_commit.message }}
          **UUID:** ${{ needs.build.outputs.uuid }}
          
          ### 📁 Tính năng mới
          - ✨ **Auto-copy folders**: Tự động copy tất cả folder vào `_internal/`
          - 🔍 **Smart detection**: Bỏ qua các folder không cần thiết (.git, __pycache__, etc.)
          - 📦 **Complete package**: Đảm bảo exe có thể truy cập tất cả resource folder
          - 🎨 **Icon support**: EXE file có icon Facebook
          
          ### Tải xuống
          - `MyApp-windows.zip` - Phiên bản Windows (folder format) với icon
          
          ### Nội dung package
          - File `version_client.json` trong `_internal/` để kiểm tra cập nhật
          - Thư mục `config/` chứa cấu hình
          - Thư mục `internal/` và `data/` để lưu trữ
          - **Tất cả folder từ source** đã được copy vào `_internal/`
          - **Icon Facebook** được gắn vào EXE file
          
          ### Cấu trúc thư mục
          ```
          MyApp/
          ├── MyApp.exe (with Facebook icon)
          ├── facebook.ico
          ├── internal/
          ├── config/
          ├── data/
          └── _internal/ (PyInstaller files + Your folders)
              ├── version_client.json
              ├── [your_folders] ← AUTO COPIED FOLDERS ONLY
              └── ... (PyInstaller runtime files)
          ```
          
          ### 🔧 Cài đặt
          1. Tải file ZIP
          2. Giải nén vào thư mục bất kỳ  
          3. Chạy `MyApp.exe` (có icon Facebook)
          
          ### 📊 Thông tin build
          - **Commit:** ${{ github.sha }}
          - **Build number:** ${{ github.run_number }}
          - **Build time:** ${{ github.event.head_commit.timestamp }}
          - **Commit message:** ${{ github.event.head_commit.message }}
          
          ### 🔄 API Update Check
          Sử dụng endpoint: `https://api.github.com/repos/${{ github.repository }}/releases/latest`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-update:
    runs-on: ubuntu-latest
    needs: [build, auto-release]
    if: always() && (needs.build.outputs.release-created == 'tag' || needs.auto-release.result == 'success')
    steps:
      - name: Send UUID to API
        run: |
          PRODUCT_ID="${{ needs.build.outputs.product-id }}"
          UUID="${{ needs.build.outputs.uuid }}"
          
          if [ -z "$PRODUCT_ID" ] || [ -z "$UUID" ]; then
            echo "Missing PRODUCT_ID or UUID"
            echo "PRODUCT_ID: $PRODUCT_ID"
            echo "UUID: $UUID"
            exit 1
          fi
          
          echo "Sending to API:"
          echo "  - Product ID: $PRODUCT_ID"
          echo "  - UUID: $UUID"
          
          # Gửi UUID lên API
          RESPONSE=$(curl -X POST \
            https://web-mmo-blush.vercel.app/api/update_notify \
            -H "Content-Type: application/json" \
            -d "{\"product_id\": \"$PRODUCT_ID\", \"version_client\": \"$UUID\"}" \
            --max-time 30 \
            --retry 3 \
            --retry-delay 5 \
            --write-out "HTTP_CODE:%{http_code}" \
            --silent)
          
          HTTP_CODE=$(echo "$RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          BODY=$(echo "$RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
          
          echo "API Response:"
          echo "  - HTTP Code: $HTTP_CODE"
          echo "  - Body: $BODY"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Successfully sent UUID to API"
          else
            echo "Failed to send UUID to API (HTTP $HTTP_CODE)"
            echo "Response: $BODY"
          fi
        shell: bash